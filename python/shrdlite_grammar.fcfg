
## This is how you use this grammar:
# >>> import nltk
# >>> grammar = nltk.data.load("file:shrdlitegrammar.fcfg", cache=False)
# >>> parser = nltk.FeatureChartParser(grammar)
# >>> sentence = "put the white ball in a box on the floor".split()
# >>> for tree in parser.parse(sentence): 
# ...     print tree.label()['sem']


## Non-lexical grammar rules

command[sem=?Cmd] -> opt_will_you opt_please basic_command[sem=?Cmd] opt_please

basic_command[sem=(take,?Entity)] -> take entity[sem=?Entity]
basic_command[sem=(put,?Location)] -> move it location[sem=?Location]
basic_command[sem=(move,?Entity,?Location)] -> move entity[sem=?Entity] location[sem=?Location]

location[sem=(relative,?Relation,?Entity)] -> relation[sem=?Relation] entity[sem=?Entity]

entity[sem=floor] -> the_floor

entity[sem=(basic_entity,?Quant,?Object)] -> quantifier[num=?Num,sem=?Quant] object[num=?Num,sem=?Object]

entity[sem=(relative_entity,?Quant,?Object,?Location)] -> quantifier[num=?Num,sem=?Quant] object[num=?Num,sem=?Object] opt_that_is[num=?Num] location[sem=?Location]

object[num=?Num,sem=(object,?Form,?Size,?Color)] -> size[sem=?Size] color[sem=?Color] form[num=?Num,sem=?Form]
object[num=?Num,sem=(object,?Form,?Size,?Color)] -> color[sem=?Color] size[sem=?Size] form[num=?Num,sem=?Form]
object[num=?Num,sem=(object,?Form,'-',  ?Color)] -> color[sem=?Color] form[num=?Num,sem=?Form]
object[num=?Num,sem=(object,?Form,?Size,'-'   )] -> size[sem=?Size] form[num=?Num,sem=?Form]
object[num=?Num,sem=(object,?Form,'-',  '-'   )] -> form[num=?Num,sem=?Form]

## Lexical rules

quantifier[num=sg,sem=the] -> "the"
quantifier[num=sg,sem=any] -> "a" | "an" | "any"
quantifier[num=sg,sem=all] -> "every"
quantifier[num=pl,sem=all] -> "all"

relation[sem=beside] -> "beside"
relation[sem=leftof] -> "left" "of" | "to" "the" "left" "of"
relation[sem=rightof] -> "right" "of" | "to" "the" "right" "of"
relation[sem=above] -> "above"
relation[sem=ontop] -> "on" "top" "of" | "on"
relation[sem=under] -> "under"
relation[sem=inside] -> "inside" | "in" | "into"

size[sem=small] -> "small" | "tiny"
size[sem=large] -> "large" | "big"

color[sem=black] -> "black"
color[sem=white] -> "white"
color[sem=blue] -> "blue"
color[sem=green] -> "green"
color[sem=yellow] -> "yellow"
color[sem=red] -> "red"

form[num=sg,sem=anyform] -> "object" | "thing" | "form"
form[num=pl,sem=anyform] -> "objects" | "things" | "forms"
form[num=sg,sem=brick] -> "brick"
form[num=pl,sem=brick] -> "bricks"
form[num=sg,sem=plank] -> "plank"
form[num=pl,sem=plank] -> "planks"
form[num=sg,sem=ball] -> "ball"
form[num=pl,sem=ball] -> "balls"
form[num=sg,sem=pyramid] -> "pyramid"
form[num=pl,sem=pyramid] -> "pyramids"
form[num=sg,sem=box] -> "box"
form[num=pl,sem=box] -> "boxes"
form[num=sg,sem=table] -> "table"
form[num=pl,sem=table] -> "tables"

## Lexicon (without semantic content)

the_floor -> "the" "floor"

opt_that_is[num=sg] -> | "that" "is"
opt_that_is[num=pl] -> | "that" "are"

move -> "move" | "put" | "drop"
take -> "take" | "grasp" | "pick" "up"
it -> "it"

opt_will_you -> | "will" "you" | "can" "you" | "could" "you"
opt_please -> | "please"
